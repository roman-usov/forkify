{"mappings":"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","sources":["src/js/controller.js"],"sourcesContent":["const recipeContainer = document.querySelector('.recipe');\n\nconst timeout = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\n// https://forkify-api.herokuapp.com/v2\n\n///////////////////////////////////////\n\n/*const renderError = function (msg) {\n  countriesContainer.insertAdjacentText('beforeend', msg);\n  countriesContainer.style.opacity = '1';\n};\n\nconst handleGeoApiError = function (data) {\n  if (data.error.code !== '018')\n    throw new Error(`${data.error.code} ${data.error.message}`);\n  if (data.error.code === '018')\n    throw new Error(`${data.error.code} ${data.error.description}`);\n};\n\nfunction handleCountryApiError(responseData) {\n  if (responseData.status === 404)\n    throw new Error(`${responseData.status} Country not found`);\n  if (/^4([0-3]|[5-9]){2}/g.test(responseData.status))\n    throw new Error(\n      `${responseData.status} Handling Error: ${responseData.message}`\n    );\n}\n\nconst getJSON = function (url, errorMsg) {\n  return fetch(url).then(response => {\n    if (!response.ok) throw new Error(`${errorMsg} (${response.status})`);\n    return response.json();\n  });\n};\n\nconst getCountryData = function (country) {\n  getJSON(`https://restcountries.com/v2/name/${country}`)\n    .then(data => {\n      console.log(data);\n      if (data.status) handleCountryApiError(data);\n      renderCountry(data[0]);\n      const neighbor = data[0].borders ? data[0].borders[0] : null;\n      //const neighbor = 'edssgdsgdtr';\n      if (!neighbor) throw new Error('No neighbor found');\n      return getJSON(`https://restcountries.com/v2/alpha/${neighbor}`);\n    })\n    .then(data => {\n      console.log(data);\n      //if (data === undefined) return;\n      if (data.status) handleCountryApiError(data);\n      renderCountry(data, 'neighbour');\n    })\n    .catch(err => {\n      renderError(`Something went wrong 💥💥 ${err.message}. Try again!`);\n    })\n    .finally(() => (countriesContainer.style.opacity = '1'));\n};\n\nconst renderCountry = function (data, className = '') {\n  const html = `\n    <article class=\"country ${className}\">\n            <img class=\"country__img\" src=\"${data.flag}\" alt=\"\"/>\n            <div class=\"country__data\">\n              <h3 class=\"country__name\">${data.name}</h3>\n              <h4 class=\"country__region\">${data.region}</h4>\n              <p class=\"country__row\"><span>👫</span>${(\n    +data.population / 1000000\n  ).toFixed(1)}</p>\n              <p class=\"country__row\"><span>🗣️</span>${\n    data.languages[0].name\n  }</p>\n              <p class=\"country__row\"><span>💰</span>${\n    data.currencies[0].code\n  }</p>\n            </div>\n    </article>\n  `;\n  countriesContainer.insertAdjacentHTML('beforeend', html);\n  countriesContainer.style.opacity = '1';\n};\n\nconst getPosition = function () {\n  return new Promise((resolve, reject) => {\n    // navigator.geolocation.getCurrentPosition(\n    //   position => resolve(position),\n    //   err => reject(err)\n    // );\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n\nconst whereAmI = async function () {\n  try {\n    const geolocation = await getPosition();\n    const { latitude: lat, longitude: lng } = geolocation.coords;\n    const geocodeResponse = await fetch(\n      `https://geocode.xyz/${lat},${lng}?json=1`\n    );\n    //const geocodeResponse = await fetch(`https://geocode.xyz/${0},${1}?json=1`);\n    console.log(geocodeResponse);\n    const geocodeResponseBody = await geocodeResponse.json();\n    if (geocodeResponseBody.error) handleGeoApiError(geocodeResponseBody);\n    if (!geocodeResponseBody.country || !geocodeResponseBody.city)\n      throw new Error('Your request did not produce any results');\n    const countriesResponse = await fetch(\n      `https://restcountries.com/v2/name/${geocodeResponseBody.country}`\n    );\n    const countriesResponseBody = await countriesResponse.json();\n    if (countriesResponseBody.status)\n      handleCountryApiError(countriesResponseBody);\n    renderCountry(countriesResponseBody[0]);\n    return `You are in ${geocodeResponseBody.city}, ${geocodeResponseBody.country}`;\n  } catch (err) {\n    console.log(err);\n    renderError(`Something went wrong 💥💥 ${err.message}. Try again!`);\n    throw new Error(`Something went wrong 💥💥 ${err.message}. Try again!`);\n  }\n};*/\n\nconst renderIngredients = function(ingredients) {\n  return ingredients.map(ingredient => {\n   return  `\n    <li class=\"recipe__ingredient\">\n      <svg class=\"recipe__icon\">\n        <use href=\"src/img/icons.svg#icon-check\"></use>\n      </svg>\n      <div class=\"recipe__quantity\">${ingredient.quantity}</div>\n      <div class=\"recipe__description\">\n        <span class=\"recipe__unit\">${ingredient.unit}</span>\n        ${ingredient.description}\n      </div>\n    </li>\n   `;\n  }).join('');\n};\n\nconst renderRecipe = function(recipe) {\n  const recipeHtml = `\n    <figure class=\"recipe__fig\">\n      <img src=\"${recipe.image}\" alt=\"${recipe.title}\" class=\"recipe__img\" />\n      <h1 class=\"recipe__title\">\n        <span>${recipe.title}</span>\n      </h1>\n    </figure>\n\n    <div class=\"recipe__details\">\n      <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n          <use href=\"src/img/icons.svg#icon-clock\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cookingTime}</span>\n        <span class=\"recipe__info-text\">minutes</span>\n      </div>\n      <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n          <use href=\"src/img/icons.svg#icon-users\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\n        <span class=\"recipe__info-text\">servings</span>\n\n        <div class=\"recipe__info-buttons\">\n          <button class=\"btn--tiny btn--increase-servings\">\n            <svg>\n              <use href=\"src/img/icons.svg#icon-minus-circle\"></use>\n            </svg>\n          </button>\n          <button class=\"btn--tiny btn--increase-servings\">\n            <svg>\n              <use href=\"src/img/icons.svg#icon-plus-circle\"></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"recipe__user-generated\">\n        <svg>\n          <use href=\"src/img/icons.svg#icon-user\"></use>\n        </svg>\n      </div>\n      <button class=\"btn--round\">\n        <svg class=\"\">\n          <use href=\"src/img/icons.svg#icon-bookmark-fill\"></use>\n        </svg>\n      </button>\n    </div>\n\n    <div class=\"recipe__ingredients\">\n      <h2 class=\"heading--2\">Recipe ingredients</h2>\n      <ul class=\"recipe__ingredient-list\">\n        ${renderIngredients(recipe.ingredients)}\n      </ul>\n    </div>\n\n    <div class=\"recipe__directions\">\n      <h2 class=\"heading--2\">How to cook it</h2>\n      <p class=\"recipe__directions-text\">\n        This recipe was carefully designed and tested by\n        <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\n        directions at their website.\n      </p>\n      <a\n        class=\"btn--small recipe__btn\"\n        href=\"${recipe.sourceUrl}\"\n        target=\"_blank\"\n      >\n        <span>Directions</span>\n        <svg class=\"search__icon\">\n          <use href=\"src/img/icons.svg#icon-arrow-right\"></use>\n        </svg>\n      </a>\n    </div>\n  `;\n  recipeContainer.innerHTML = '';\n  recipeContainer.insertAdjacentHTML('afterbegin', recipeHtml);\n  console.log(recipeHtml);\n};\n\nconst showRecipe = async function() {\n  try {\n    const recipeResponse = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bcc40');\n    console.log(recipeResponse);\n    const recipeData = await recipeResponse.json();\n    console.log(recipeData);\n    if(!recipeResponse.ok) throw new Error (`${recipeResponse.status} ${recipeData.message}`);\n    let {recipe} = recipeData.data;\n    recipe = {\n      id: recipe.id,\n      title: recipe.title,\n      publisher: recipe.publisher,\n      sourceUrl: recipe.source_url,\n      image: recipe.image_url,\n      ingredients: recipe.ingredients,\n      servings: recipe.servings,\n      cookingTime: recipe.cooking_time,\n    }\n    console.log(recipe);\n\n    renderRecipe(recipe);\n  } catch(err) {\n    alert(`Something went wrong: ${err.message}`);\n    // console.log(`Something went wrong ${err.message}. Try again!`);\n    // throw new Error(`Something went wrong ${err.message}`);\n  }\n};\n\nshowRecipe();\n\n// fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886')"],"names":[],"version":3,"file":"index.430fc437.js.map","sourceRoot":"/__parcel_source_root/"}